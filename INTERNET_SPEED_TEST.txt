https://knowtheusefulltools.great-site.net/internet_speed_test/
INTERNET SPEED TEST.


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Internet Speed Test</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Inter', system-ui, sans-serif;
    }

    body {
      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 20px;
    }

    .speed-test-container {
      background: white;
      border-radius: 20px;
      box-shadow: 0 15px 40px rgba(0,0,0,0.1);
      padding: 2rem;
      width: 100%;
      max-width: 600px;
      transition: transform 0.3s ease;
    }

    .speed-test-container:hover {
      transform: translateY(-5px);
    }

    h1 {
      text-align: center;
      font-size: 1.8rem;
      margin-bottom: 2rem;
      font-weight: 700;
      background: linear-gradient(45deg, #FF4D80, #FF9500);
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
    }

    .dial-container {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-bottom: 2rem;
      flex-wrap: wrap;
    }

    .dial-wrapper {
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .dial {
      position: relative;
      width: 150px;
      height: 150px;
      border-radius: 50%;
      background: conic-gradient(#00DDEB 0deg, #6B48FF 180deg, #00DDEB 360deg);
      box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .pointer {
      position: absolute;
      width: 8px;
      height: 70px;
      background: #FF4D80;
      top: 50%;
      left: 50%;
      transform-origin: bottom center;
      transform: translate(-50%, -100%) rotate(-90deg);
      transition: transform 0.5s ease-out;
      border-radius: 5px;
    }

    .dial-result {
      position: absolute;
      width: 100%;
      text-align: center;
      top: 70%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 1.2rem;
      font-weight: bold;
      color: white;
      text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);
    }

    .dial-label {
      margin-top: 0.5rem;
      font-size: 0.9rem;
      font-weight: bold;
      color: #4a5568;
    }

    .speed-test-btn {
      background: linear-gradient(135deg, #FF4D80 0%, #FF9500 100%);
      color: white;
      padding: 1rem 2rem;
      border: none;
      border-radius: 10px;
      font-size: 1rem;
      cursor: pointer;
      transition: all 0.3s ease;
      display: block;
      width: 100%;
      font-weight: 600;
      text-align: center;
      margin: 0 auto;
    }

    .speed-test-btn:hover {
      transform: scale(1.03);
      box-shadow: 0 10px 20px rgba(255,77,128,0.3);
    }

    .ip-address {
      margin-top: 1.5rem;
      color: #4a5568;
      font-size: 1.2rem; /* Larger text, matching results table */
      font-weight: bold; /* Bold text, matching results table */
      text-align: center;
    }

    .results-table {
      margin: 1.5rem auto;
      border-collapse: collapse;
      width: 100%;
      background: #f8f9fa;
      border-radius: 10px;
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
      overflow: hidden;
      display: none;
    }

    .results-table th,
    .results-table td {
      padding: 12px;
      text-align: center;
      border: 1px solid #d1d5db;
      font-size: 1.2rem;
      font-weight: bold;
    }

    .results-table th {
      background: linear-gradient(135deg, #FF4D80 0%, #FF9500 100%);
      color: white;
    }

    @media (max-width: 480px) {
      .speed-test-container {
        padding: 1.5rem;
      }

      h1 {
        font-size: 1.5rem;
      }

      .dial {
        width: 120px;
        height: 120px;
      }

      .pointer {
        height: 60px;
      }

      .dial-result {
        font-size: 1rem;
      }

      .dial-label {
        font-size: 0.8rem;
      }

      .speed-test-btn {
        padding: 0.8rem 1.5rem;
      }

      .results-table th,
      .results-table td {
        padding: 8px;
        font-size: 1rem;
      }

      .ip-address {
        font-size: 1rem; /* Adjusted for smaller screens */
      }
    }
  </style>
</head>
<body>
  <div class="speed-test-container">
    <h1>Internet Speed Test</h1>
    <div class="dial-container">
      <div class="dial-wrapper">
        <div class="dial" id="downloadDial">
          <div class="pointer" id="downloadPointer"></div>
          <div class="dial-result" id="downloadResult">0 Mbps</div>
        </div>
        <span class="dial-label">Download</span>
      </div>
      <div class="dial-wrapper">
        <div class="dial" id="uploadDial">
          <div class="pointer" id="uploadPointer"></div>
          <div class="dial-result" id="uploadResult">0 Mbps</div>
        </div>
        <span class="dial-label">Upload</span>
      </div>
    </div>
    <button class="speed-test-btn" id="startTestBtn">Start Test</button>

    <table class="results-table" id="resultsTable">
      <thead>
        <tr>
          <th>Metric</th>
          <th>Download (Mbps)</th>
          <th>Upload (Mbps)</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Highest</td>
          <td id="maxDownload">0</td>
          <td id="maxUpload">0</td>
        </tr>
        <tr>
          <td>Lowest</td>
          <td id="minDownload">0</td>
          <td id="minUpload">0</td>
        </tr>
        <tr>
          <td>Average</td>
          <td id="avgDownload">0</td>
          <td id="avgUpload">0</td>
        </tr>
      </tbody>
    </table>

    <p class="ip-address" id="ipAddress">Your IP Address: Fetching...</p>
  </div>

  <script>
    (function() {
      const downloadPointer = document.getElementById('downloadPointer');
      const uploadPointer = document.getElementById('uploadPointer');
      const downloadResult = document.getElementById('downloadResult');
      const uploadResult = document.getElementById('uploadResult');
      const startTestBtn = document.getElementById('startTestBtn');
      const resultsTable = document.getElementById('resultsTable');
      const ipAddressEl = document.getElementById('ipAddress');

      let downloadSpeeds = [];
      let uploadSpeeds = [];

      function updateDial(pointer, resultEl, speed) {
        const maxSpeed = 200; // Maximum expected speed in Mbps
        let angle = Math.min(Math.max((speed / maxSpeed) * 180 - 90, -90), 90);
        pointer.style.transform = `translate(-50%, -100%) rotate(${angle}deg)`;
        resultEl.textContent = `${speed.toFixed(2)} Mbps`;
      }

      async function measureDownloadSpeed() {
        const speeds = [];
        const startTime = Date.now();
        while (Date.now() - startTime < 10000) {
          const startChunkTime = performance.now();
          try {
            await fetch('https://speed.cloudflare.com/__down', { method: 'GET', cache: 'no-store' });
          } catch (error) {
            console.error('Download test error:', error);
            break;
          }
          const endChunkTime = performance.now();
          const speed = (1 / ((endChunkTime - startChunkTime) / 1000)) * 8;
          speeds.push(speed);
          updateDial(downloadPointer, downloadResult, speed);
          await new Promise(resolve => setTimeout(resolve, 100));
        }
        return speeds;
      }

      async function measureUploadSpeed() {
        const speeds = [];
        const startTime = Date.now();
        while (Date.now() - startTime < 10000) {
          const data = new ArrayBuffer(1024 * 1024); // 1MB data block
          const startChunkTime = performance.now();
          try {
            await fetch('https://speed.cloudflare.com/__up', { method: 'POST', body: data, cache: 'no-store' });
          } catch (error) {
            console.error('Upload test error:', error);
            break;
          }
          const endChunkTime = performance.now();
          const speed = (1 / ((endChunkTime - startChunkTime) / 1000)) * 8;
          speeds.push(speed);
          updateDial(uploadPointer, uploadResult, speed);
          await new Promise(resolve => setTimeout(resolve, 100));
        }
        return speeds;
      }

      async function fetchIPAddress() {
        try {
          const response = await fetch('https://api.ipify.org?format=json');
          const data = await response.json();
          return data.ip;
        } catch (error) {
          console.error('Error fetching IP:', error);
          return 'Unknown';
        }
      }

      function calculateStats(speeds) {
        return {
          lowest: Math.min(...speeds).toFixed(2),
          highest: Math.max(...speeds).toFixed(2),
          average: (speeds.reduce((a, b) => a + b, 0) / speeds.length).toFixed(2)
        };
      }

      startTestBtn.addEventListener('click', async () => {
        startTestBtn.disabled = true;
        resultsTable.style.display = 'none';
        ipAddressEl.textContent = 'Your IP Address: Fetching...';

        try {
          downloadSpeeds = await measureDownloadSpeed();
          uploadSpeeds = await measureUploadSpeed();
          const ip = await fetchIPAddress();
          const downloadStats = calculateStats(downloadSpeeds);
          const uploadStats = calculateStats(uploadSpeeds);

          document.getElementById('maxDownload').textContent = downloadStats.highest;
          document.getElementById('minDownload').textContent = downloadStats.lowest;
          document.getElementById('avgDownload').textContent = downloadStats.average;

          document.getElementById('maxUpload').textContent = uploadStats.highest;
          document.getElementById('minUpload').textContent = uploadStats.lowest;
          document.getElementById('avgUpload').textContent = uploadStats.average;

          resultsTable.style.display = 'table';
          ipAddressEl.textContent = `Your IP Address: ${ip}`;
        } catch (error) {
          resultsTable.style.display = 'none';
          ipAddressEl.textContent = `An error occurred: ${error.message}`;
        } finally {
          startTestBtn.disabled = false;
        }
      });
    })();
  </script>
</body>
</html>

************************************ DESCPTION ****************************

This code is a modern internet speed test application built using HTML, CSS, and JavaScript. It measures download and upload speeds and displays them dynamically using animated dials and a results table.

🌟 Main Components Breakdown
User Interface (UI)
Speed Measurement Logic
Data Calculation and Display
IP Address Fetching
📊 1. User Interface (UI)
The HTML structure defines the layout with:

Download and Upload Dials – Animated speed indicators.
Start Button – Initiates the speed test.
Results Table – Displays highest, lowest, and average speeds.
IP Address – Fetches and displays the user's public IP address.
Key HTML Elements:
html
Copy
Edit
<div class="dial" id="downloadDial">
  <div class="pointer" id="downloadPointer"></div>
  <div class="dial-result" id="downloadResult">0 Mbps</div>
</div>
<button class="speed-test-btn" id="startTestBtn">Start Test</button>
<p class="ip-address" id="ipAddress">Your IP Address: Fetching...</p>
👉 Purpose: Each dial updates in real-time as the test runs. The button triggers the test, and the IP is shown below the results.

🎨 2. Dynamic Styling (CSS)
The CSS handles the design and animations. Some key features:

Dial Animation:
css
Copy
Edit
.pointer {
  position: absolute;
  width: 8px;
  height: 70px;
  background: #FF4D80;
  top: 50%;
  left: 50%;
  transform-origin: bottom center;
  transform: translate(-50%, -100%) rotate(-90deg);
  transition: transform 0.5s ease-out;
}
👉 Purpose: The .pointer rotates to simulate a moving speedometer.

🚀 3. Speed Measurement Logic (JavaScript)
The JavaScript is responsible for measuring download and upload speeds.

Initialization:
These lines grab DOM elements to manipulate:

javascript
Copy
Edit
const downloadPointer = document.getElementById('downloadPointer');
const uploadPointer = document.getElementById('uploadPointer');
const startTestBtn = document.getElementById('startTestBtn');
📏 (a) Dial Update Function
This function updates the dial angle based on speed:

javascript
Copy
Edit
function updateDial(pointer, resultEl, speed) {
  const maxSpeed = 200; 
  let angle = Math.min(Math.max((speed / maxSpeed) * 180 - 90, -90), 90);
  pointer.style.transform = `translate(-50%, -100%) rotate(${angle}deg)`;
  resultEl.textContent = `${speed.toFixed(2)} Mbps`;
}
👉 Explanation:

maxSpeed is set to 200 Mbps (you can adjust this for higher speeds).
Angle Calculation:
ini
Copy
Edit
angle = (speed / maxSpeed) * 180 - 90
This formula maps the speed to an angle between -90° and +90°.
📥 (b) Download Speed Measurement
This function measures download speed by requesting a test file:

javascript
Copy
Edit
async function measureDownloadSpeed() {
  const speeds = [];
  const startTime = Date.now();
  while (Date.now() - startTime < 10000) {
    const startChunkTime = performance.now();
    await fetch('https://speed.cloudflare.com/__down', { method: 'GET', cache: 'no-store' });
    const endChunkTime = performance.now();
    const speed = (1 / ((endChunkTime - startChunkTime) / 1000)) * 8;
    speeds.push(speed);
    updateDial(downloadPointer, downloadResult, speed);
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  return speeds;
}
👉 How It Works:

Duration: Runs for 10 seconds (while (Date.now() - startTime < 10000)).
Fetch Data: Downloads a chunk using the Cloudflare endpoint.
Speed Calculation:
ini
Copy
Edit
speed = (1 / timeTaken) * 8
Converts time into Mbps (megabits per second).
Update UI: Continuously updates the dial with updateDial().
📤 (c) Upload Speed Measurement
The upload function works similarly but sends data instead:

javascript
Copy
Edit
async function measureUploadSpeed() {
  const speeds = [];
  const startTime = Date.now();
  while (Date.now() - startTime < 10000) {
    const data = new ArrayBuffer(1024 * 1024); // 1 MB data
    const startChunkTime = performance.now();
    await fetch('https://speed.cloudflare.com/__up', { method: 'POST', body: data, cache: 'no-store' });
    const endChunkTime = performance.now();
    const speed = (1 / ((endChunkTime - startChunkTime) / 1000)) * 8;
    speeds.push(speed);
    updateDial(uploadPointer, uploadResult, speed);
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  return speeds;
}
👉 Key Difference: Uses POST to upload a 1 MB chunk repeatedly.

📈 4. Data Calculation and Display
This function computes the highest, lowest, and average speeds:

javascript
Copy
Edit
function calculateStats(speeds) {
  return {
    lowest: Math.min(...speeds).toFixed(2),
    highest: Math.max(...speeds).toFixed(2),
    average: (speeds.reduce((a, b) => a + b, 0) / speeds.length).toFixed(2)
  };
}
👉 Math Explained:

Math.min() – Finds the smallest value.
Math.max() – Finds the largest value.
reduce() – Computes the sum, then divides by the number of samples.
🌐 5. IP Address Fetching
This function fetches the user’s public IP using the ipify API:

javascript
Copy
Edit
async function fetchIPAddress() {
  try {
    const response = await fetch('https://api.ipify.org?format=json');
    const data = await response.json();
    return data.ip;
  } catch (error) {
    console.error('Error fetching IP:', error);
    return 'Unknown';
  }
}
👉 Explanation:

Fetch Request: Calls https://api.ipify.org?format=json.
JSON Parsing: Extracts the ip from the response.
Error Handling: If it fails, it returns 'Unknown'.
🎬 6. Event Handling
When the user clicks the "Start Test" button:

javascript
Copy
Edit
startTestBtn.addEventListener('click', async () => {
  startTestBtn.disabled = true; 
  resultsTable.style.display = 'none'; 
  const ip = await fetchIPAddress();
  const downloadSpeeds = await measureDownloadSpeed();
  const uploadSpeeds = await measureUploadSpeed();
  const downloadStats = calculateStats(downloadSpeeds);
  const uploadStats = calculateStats(uploadSpeeds);
  resultsTable.style.display = 'table';
  ipAddressEl.textContent = `Your IP Address: ${ip}`;
  startTestBtn.disabled = false;
});
👉 Flow:

Disables Button: Prevents duplicate tests.
Runs Speed Tests: Calls the download and upload functions.
Updates UI: Displays results and IP address.
✅ Summary
Fetch:
Download: Measures speed by downloading test chunks.
Upload: Sends data to test upload speed.
Animate: Updates dials using speed-to-angle math.
Display: Shows calculated speed stats and IP address.
Interactive: Handles button clicks and updates in real time.






